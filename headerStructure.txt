> neuron
  > float activation;
  > std::vector<float> weights;
  > constructor(float activation, std::vector<float> weights = {}, size_t weightsSize = 0)
> layer: neuron
  > std::vector<neuron> neurons;
  > constructor(std::vector<neuron> neurons = {})
> neuralNetwork: layer
  > std::vector<layer> layers;
  > constructor(std::string fileName = "", int inputSize = 0, int hiddenLayerCount = 0, int hiddenLayerSize = 0, int outputSize = 0)
  > void readFile(std::string JSON_FileName)
  > void writeFile(std::string JSON_FileName)
  > void toBinary()
  > void fromBinary(std::string binary, int inputSize = 0, int hiddenLayerCount = 0, int hiddenLayerSize = 0, int outputSize = 0)
> entity: SFML
  > sf::Vector2f vel;
  > sf::Vector2f pos;
  > constructor(sf::Vector2f _vel, sf::Vector2f _pos)
> grenade: entity
  > sf::Clock lifeTime; // How long it existed
  > constructor(sf::Vector2f _vel, sf::Vector2f _pos)
> AI: grenade, neuralNetwork
  > float health = 100;
  > int fitness = 0;
  > float aimAngle = 0; // Degrees
  > std::vector<grenade> grenadeList;
  > neuralNetwork nn;
  > int gen;
  > constructor(int _gen = 0, neuralNetwork _nn = neuralNetwork("", 5, 2, 5, 5))
  > ai crossOver(ai with)
  > void mutate()
> game: AI
  > void Update()
  > void Render()
  > constructor(sf::Vector2i mapSize, sf::Vector2i windowSize)
  > ~deconstructor()
> main.cpp: game
  > blah blah blah